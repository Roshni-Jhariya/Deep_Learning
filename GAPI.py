{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "GAPI",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1EoYOwOAo_vAjDLx9sK9PCQHkyFbRuJ1n",
      "authorship_tag": "ABX9TyP8ITdFMj1GfmS42+E8SDke",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Roshni-Jhariya/Deep_Learning/blob/master/GAPI.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2BeFG25AnMdV",
        "outputId": "b1c0dbff-6cd4-4600-df96-f427e87d899e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "import json\n",
        "import googletrans\n",
        "\n",
        "print(googletrans.LANGUAGES)\n",
        "from googletrans import Translator\n",
        "translator = Translator()\n",
        "\n",
        "def lambda_handler(event, context):\n",
        "    # TODO implement\n",
        "    return {\n",
        "        'statusCode': 200,\n",
        "        'body': json.dumps('Hello from Lambda!')\n",
        "    }\n",
        "\n",
        "\n",
        "# This script will take the Sherlock Holmes open source txt from the Open Source Project Gutenberg site (http://www.gutenberg.org/)\n",
        "# Before running this script, please download the adventures of Sherlock Holmes in Plain Text UTF-8 format\n",
        "# Source data location: www.gutenberg.org/ebooks/1661 \"The Adventures of Sherlock Holmes by Arthur Conan Doyle\"\n",
        "# Script also uses the Natural Language Toolkit library (NLTK) available from https://www.nltk.org/\n",
        "\n",
        "import re\n",
        "import json\n",
        "import zipfile \n",
        "import nltk\n",
        "\n",
        "# Download punkt plugin for NLTK\n",
        "nltk.download('punkt')\n",
        "\n",
        "\n",
        "# -*- coding: utf-8 -*-\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "from __future__ import print_function\n",
        "import boto3\n",
        "import logging\n",
        "\n",
        "print(1)\n",
        "logger = logging.getLogger()\n",
        "logger.setLevel(logging.DEBUG)\n",
        "\n",
        "# boto3 translate client\n",
        "translate = boto3.client('translate', region_name='us-west-2')\n",
        "#kms = boto3.client('kms')\n",
        "\n",
        "# Use a dictionary to map supported languages with their ISO639-1 codes\n",
        "lang_map = {\n",
        "    'hindi': 'hi', \n",
        "    'kannada' :'kn',\n",
        "    'English': 'en',\n",
        "    'gujrati': 'gu',\n",
        "    \n",
        "    'punjabi': 'pa'\n",
        "   # 'sanskrit': 'san'\n",
        "    }\n",
        "print(2)\n",
        "# --------------- Helpers that build all of the responses ----------------------\n",
        "\n",
        "def get_slots(intent_request):\n",
        "    return intent_request['currentIntent']['slots']\n",
        "\n",
        "def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):\n",
        "    logger.debug('Elicit Slot function intentName: {}'.format(intent_name))\n",
        "    logger.debug('Elicit Slot function slots: {}'.format(slots))\n",
        "    logger.debug('Elicit Slot function slotToElicit: {}'.format(slot_to_elicit))\n",
        "    logger.debug('Elicit Slot function message: {}'.format(message))\n",
        "    \n",
        "    \n",
        "    return {\n",
        "        'sessionAttributes': session_attributes,\n",
        "        'dialogAction': {\n",
        "            'type': 'ElicitSlot',\n",
        "            'intentName': intent_name,\n",
        "            'slots': slots,\n",
        "            'slotToElicit': slot_to_elicit,\n",
        "            'message': message\n",
        "        }\n",
        "    }\n",
        "\n",
        "\n",
        "def confirm_intent(session_attributes, intent_name, slots, message):\n",
        "     {\n",
        "        'sessionAttributes': session_attributes,\n",
        "        'dialogAction': {\n",
        "            'type': 'ConfirmIntent',\n",
        "            'intentName': intent_name,\n",
        "            'slots': slots,\n",
        "            'message': message\n",
        "        }\n",
        "    }\n",
        "\n",
        "\n",
        "def close(session_attributes, fulfillment_state, message):\n",
        "    response = {\n",
        "        'sessionAttributes': session_attributes,\n",
        "        'dialogAction': {\n",
        "            'type': 'Close',\n",
        "            'fulfillmentState': fulfillment_state,\n",
        "            'message': message\n",
        "        }\n",
        "    }\n",
        "\n",
        "    return response\n",
        "\n",
        "\n",
        "def delegate(session_attributes, slots):\n",
        "    return {\n",
        "        'sessionAttributes': session_attributes,\n",
        "        'dialogAction': {\n",
        "            'type': 'Delegate',\n",
        "            'slots': slots\n",
        "        }\n",
        "    }\n",
        "\n",
        "# --------------- Functions that control the skill's behavior ------------------\n",
        "def try_ex(func):\n",
        "    \"\"\"\n",
        "    Call passed in function in try block. If KeyError is encountered return None.\n",
        "    This function is intended to be used to safely access dictionary.\n",
        "\n",
        "    Note that this function would have negative impact on performance.\n",
        "    \"\"\"\n",
        "\n",
        "    try:\n",
        "        return func()\n",
        "    except KeyError:\n",
        "        return None\n",
        "\n",
        "# return JSON-formatted descriptive response if validation fails\n",
        "def build_validation_result(isvalid, violated_slot, message_content):\n",
        "    return {\n",
        "        'isValid': isvalid,\n",
        "        'violatedSlot': violated_slot,\n",
        "        'message': {'contentType': 'PlainText', 'content': message_content}\n",
        "    }\n",
        "\n",
        "# validate source and target languages \n",
        "def validate_languages(source_lang, target_lang):\n",
        "    if source_lang is not None and source_lang not in lang_map:\n",
        "        return build_validation_result(False,\n",
        "                                       'source_lang',\n",
        "                                       'We do not currently support {} as a source language.'.format(source_lang))\n",
        "\n",
        "    if target_lang is not None and target_lang not in lang_map:\n",
        "        return build_validation_result(False,\n",
        "                                       'target_lang',\n",
        "                                       'We do not currently support {} as a target language.'.format(source_lang))\n",
        "\n",
        "    return build_validation_result(True, None, None)\n",
        "\n",
        "# Check phrase is not empty\n",
        "def validate_phrase(phrase, source_lang, target_lang):\n",
        "    if phrase is not None: \n",
        "        logger.debug('***** phrase is not none *****')\n",
        "        return build_validation_result(True, None, None)\n",
        "    else:\n",
        "        logger.debug('***** phrase is none *****')\n",
        "        return build_validation_result(False,\n",
        "                                       'phrase',\n",
        "                                       'Translating from {} to {}. What is the phrase you would like to translate?'.format(source_lang.capitalize(), target_lang.capitalize()))\n",
        "\n",
        "# --------------- Main Translator function ------------------\n",
        "\n",
        "def translatePhrase(intent_request):\n",
        "    \"\"\"\n",
        "    Performs dialog management and fulfillment for translating a phrase.\n",
        "\n",
        "    Uses Amazon Translate to translate a phrase from a source -> destination phrase and provide to customer\n",
        "    \"\"\"\n",
        "\n",
        "    source_lang = get_slots(intent_request)['source_lang'].lower()\n",
        "    target_lang = get_slots(intent_request)['target_lang'].lower()\n",
        "    phrase = get_slots(intent_request)['phrase']\n",
        "    source = intent_request['invocationSource']\n",
        "\n",
        "    logger.debug('Intent Request={}'.format(intent_request))\n",
        "    logger.debug('source_lang={}'.format(source_lang))\n",
        "    logger.debug('target_lang={}'.format(target_lang))\n",
        "\n",
        "# Google Api Integration not sdk\n",
        "\n",
        "    logger.debug('Phrase={}'.format(phrase))\n",
        "    logger.debug('inputTranscript={}'.format(intent_request['inputTranscript']))\n",
        "    \n",
        "    # Set session attrributes for the value of source and target languages\n",
        "    session_attributes = intent_request['sessionAttributes'] if intent_request['sessionAttributes'] is not None else {}\n",
        "    \n",
        "\n",
        "    if source == 'DialogCodeHook':\n",
        "        # Validate any slots which have been specified.  If any are invalid, re-elicit for their value\n",
        "        slots = get_slots(intent_request)\n",
        "\n",
        "        validation_result = validate_languages(source_lang, target_lang) #check languages are valid and supported\n",
        "        if not validation_result['isValid']:\n",
        "            slots[validation_result['violatedSlot']] = None\n",
        "            return elicit_slot(intent_request['sessionAttributes'],\n",
        "                               intent_request['currentIntent']['name'],\n",
        "                               slots,\n",
        "                               validation_result['violatedSlot'],\n",
        "                               validation_result['message'])\n",
        "        logger.debug('Validated Languages')        \n",
        "        \n",
        "        # Convert languages to ISO639-1 codes for Amazon Translate\n",
        "        sourceISO = lang_map[source_lang]\n",
        "        targetISO = lang_map[target_lang]\n",
        "\n",
        "        logger.debug('sourceISO={}'.format(sourceISO))\n",
        "        logger.debug('targetISO={}'.format(targetISO))\n",
        "        #Set session attributes for the value of source and target ISO codes\n",
        "        session_attributes['source_lang'] = sourceISO\n",
        "        session_attributes['target_lang'] = targetISO\n",
        "\n",
        "        phrase = get_slots(intent_request)['phrase']\n",
        "        logger.debug('Phrase in dialogCodeHook code={}'.format(phrase))\n",
        "        valid_phrase = validate_phrase(phrase, source_lang, target_lang)\n",
        "        if not valid_phrase['isValid']:\n",
        "            slots[valid_phrase['violatedSlot']] = None\n",
        "            return elicit_slot(intent_request['sessionAttributes'],\n",
        "                               intent_request['currentIntent']['name'],\n",
        "                               slots,\n",
        "                               valid_phrase['violatedSlot'],\n",
        "                               valid_phrase['message'])\n",
        "        logger.debug('Validated Phrase')\n",
        "        \n",
        "        # Phrase is valid. Convert phrase to translated text then reset slot to none for next translation\n",
        "        if phrase is not None:\n",
        "            translation = try_ex(lambda: translate.translate_text(Text=phrase, SourceLanguageCode=sourceISO, TargetLanguageCode=targetISO))                                                                                                                                        \n",
        "            translatedText = str(translation.get('TranslatedText'))\n",
        "            logger.debug('Translated Text is={}'.format(translatedText))\n",
        "            print (\"Translation is: \", translatedText) \n",
        "            \n",
        "            intent_request['currentIntent']['phrase'] = None\n",
        "            logger.debug('Set phrase slot to None and returning elicit slot with translation')\n",
        "            logger.debug('Phrase={}'.format(intent_request['currentIntent']['phrase']))\n",
        "            \n",
        "            return elicit_slot(intent_request['sessionAttributes'],\n",
        "                               intent_request['currentIntent']['name'],\n",
        "                               slots,\n",
        "                               'phrase',\n",
        "                               {\n",
        "                               'contentType': 'PlainText',\n",
        "                               'content': format(translatedText)\n",
        "                               })\n",
        "        logger.debug('Translated Phrase')\n",
        "        return delegate(session_attributes, intent_request['currentIntent']['slots'])\n",
        "    \n",
        "    # Convert phrase to translated text\n",
        "   # translation = try_ex(lambda: translate.translate_text(Text=phrase, SourceLanguageCode=sourceISO, TargetLanguageCode=targetISO))                                                                                                                                        \n",
        "    result = translator.translate(phrase, src=sourceISO, dest=targetISO)\n",
        "    #translatedText = str(translation.get('TranslatedText'))\n",
        "    \n",
        "    #logger.debug('Translated Text is={}'.format(translatedText))\n",
        "    logger.debug('Translated Text is={}'.format(result))\n",
        "    print (\"Translation is: \", translatedText)\n",
        "    \n",
        "\n",
        "    return close(\n",
        "        session_attributes,\n",
        "        'Fulfilled',\n",
        "        {\n",
        "            'contentType': 'PlainText',\n",
        "            'content': 'Thank you for using the translator bot'\n",
        "        }\n",
        "    )\n",
        "\n",
        "\n",
        "# --- Lex intent capture ---\n",
        "\n",
        "\n",
        "def dispatch(intent_request):\n",
        "    \"\"\"\n",
        "    Called when the user specifies an intent for this bot.\n",
        "    \"\"\"\n",
        "\n",
        "    logger.debug('dispatch userId={}, intentName={}'.format(intent_request['userId'], intent_request['currentIntent']['name']))\n",
        "\n",
        "    intent_name = intent_request['currentIntent']['name']\n",
        "\n",
        "    # Dispatch to your bot's intent handlers\n",
        "    if intent_name == 'translate_phrase':\n",
        "        return translatePhrase(intent_request)\n",
        "    raise Exception('Intent with name ' + intent_name + ' not supported')\n",
        "\n",
        "\n",
        "# --- Main lambda handler ---\n",
        "\n",
        "\n",
        "def lambda_handler(event, context):\n",
        "    \"\"\"\n",
        "    Route the incoming request based on intent.\n",
        "    The JSON body of the request is provided in the event slot.\n",
        "    \"\"\"\n",
        "    logger.debug('event.bot.name={}'.format(event['bot']['name']))\n",
        "\n",
        "    return dispatch(event)\n",
        "  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'af': 'afrikaans', 'sq': 'albanian', 'am': 'amharic', 'ar': 'arabic', 'hy': 'armenian', 'az': 'azerbaijani', 'eu': 'basque', 'be': 'belarusian', 'bn': 'bengali', 'bs': 'bosnian', 'bg': 'bulgarian', 'ca': 'catalan', 'ceb': 'cebuano', 'ny': 'chichewa', 'zh-cn': 'chinese (simplified)', 'zh-tw': 'chinese (traditional)', 'co': 'corsican', 'hr': 'croatian', 'cs': 'czech', 'da': 'danish', 'nl': 'dutch', 'en': 'english', 'eo': 'esperanto', 'et': 'estonian', 'tl': 'filipino', 'fi': 'finnish', 'fr': 'french', 'fy': 'frisian', 'gl': 'galician', 'ka': 'georgian', 'de': 'german', 'el': 'greek', 'gu': 'gujarati', 'ht': 'haitian creole', 'ha': 'hausa', 'haw': 'hawaiian', 'iw': 'hebrew', 'he': 'hebrew', 'hi': 'hindi', 'hmn': 'hmong', 'hu': 'hungarian', 'is': 'icelandic', 'ig': 'igbo', 'id': 'indonesian', 'ga': 'irish', 'it': 'italian', 'ja': 'japanese', 'jw': 'javanese', 'kn': 'kannada', 'kk': 'kazakh', 'km': 'khmer', 'ko': 'korean', 'ku': 'kurdish (kurmanji)', 'ky': 'kyrgyz', 'lo': 'lao', 'la': 'latin', 'lv': 'latvian', 'lt': 'lithuanian', 'lb': 'luxembourgish', 'mk': 'macedonian', 'mg': 'malagasy', 'ms': 'malay', 'ml': 'malayalam', 'mt': 'maltese', 'mi': 'maori', 'mr': 'marathi', 'mn': 'mongolian', 'my': 'myanmar (burmese)', 'ne': 'nepali', 'no': 'norwegian', 'or': 'odia', 'ps': 'pashto', 'fa': 'persian', 'pl': 'polish', 'pt': 'portuguese', 'pa': 'punjabi', 'ro': 'romanian', 'ru': 'russian', 'sm': 'samoan', 'gd': 'scots gaelic', 'sr': 'serbian', 'st': 'sesotho', 'sn': 'shona', 'sd': 'sindhi', 'si': 'sinhala', 'sk': 'slovak', 'sl': 'slovenian', 'so': 'somali', 'es': 'spanish', 'su': 'sundanese', 'sw': 'swahili', 'sv': 'swedish', 'tg': 'tajik', 'ta': 'tamil', 'te': 'telugu', 'th': 'thai', 'tr': 'turkish', 'uk': 'ukrainian', 'ur': 'urdu', 'ug': 'uyghur', 'uz': 'uzbek', 'vi': 'vietnamese', 'cy': 'welsh', 'xh': 'xhosa', 'yi': 'yiddish', 'yo': 'yoruba', 'zu': 'zulu'}\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "1\n",
            "2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zrvNaUZmZwS2"
      },
      "source": [
        "import googletrans\n",
        "import re\n",
        "import json\n",
        "import zipfile \n",
        "import nltk\n",
        "from __future__ import print_function\n",
        "import boto3\n",
        "import logging"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0vq7V0enj9Dv",
        "outputId": "4f437846-1835-4228-818a-3bf3529b3e91",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "!pip install logging -t .\n",
        "#!pip install --upgrade pip"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting logging\n",
            "  Using cached logging-0.4.9.6.tar.gz (96 kB)\n",
            "\u001b[31mERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\u001b[0m\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}